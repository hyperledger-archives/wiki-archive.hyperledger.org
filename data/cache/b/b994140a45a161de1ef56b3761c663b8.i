a:169:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Overview概述";}i:2;i:1;}i:3;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15;}i:4;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15;}i:5;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:174:"Logging in the peer application and in the shim interface to chaincodes is programmed using facilities provided by the github.com/op/go-logging package. This package supports";}i:2;i:17;}i:6;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:191;}i:7;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:191;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:"日志功能在节点的应用程序和链上代码的shim接口中使用，最终在github.com/op/go-logging包实现。这个包支持：";}i:2;i:193;}i:9;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:332;}i:10;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:332;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:371:"* Logging control based on the severity of the message
* 基于消息的严重程度进行日志控制
* Logging control based on the software module generating the message
* 基于软件模块产生的消息进行日志控制
* Different pretty-printing options based on the severity of the message
* 基于消息的严重程度美观的打印到不同的格式的选项";}i:2;i:334;}i:12;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:705;}i:13;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:705;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:396:"All logs are currently directed to stderr, and the pretty-printing is currently fixed. However global and module-level control of logging by severity is provided for both users and developers. There are currently no formalized rules for the types of information provided at each severity level, however when submitting bug reports the developers may want to see full logs down to the DEBUG level.";}i:2;i:707;}i:15;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1103;}i:16;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1103;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:365:"所有日志目前都被定向到stderr，而pretty-printing目前是固定的。然而，为用户和开发人员提供了严格级别的全局和模块级别的日志记录控制。目前没有关于每个严重性级别提供的信息类型的正式规则，但是当提交错误报告时，开发人员可能希望看到完整的到DEBUG级别的日志记录。";}i:2;i:1105;}i:18;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1470;}i:19;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1470;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:377:"In pretty-printed logs the logging level is indicated both by color and by a 4-character code, e.g, “ERRO” for ERROR, “DEBU” for DEBUG, etc. In the logging context a module is an arbitrary name (string) given by developers to groups of related messages. In the pretty-printed example below, the logging modules “peer”, “rest” and “main” are generating logs.";}i:2;i:1472;}i:21;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1849;}i:22;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1849;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:397:"在pretty-printed的日志中，日志记录级别由颜色和4个字符的代码指示，例如ERROR的“ERRO”，DEBUG的“DEBU”等。在日志上下文中，模块是指由开发者指定的任意名称（字符串）的相关消息的组。在以下pretty-printed的例子中，日志模块“peer”，“rest”和“main”都产生了日志。
~~~
16:47:09.634 [peer] GetLocalAddress ";}i:2;i:1851;}i:24;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:2248;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:" INFO 033 Auto detected peer address: 9.3.158.178:7051
16:47:09.635 [rest] StartOpenchainRESTServer ";}i:2;i:2250;}i:26;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:2350;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" INFO 035 Initializing the REST service";}i:2;i:2352;}i:28;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:2391;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"
16:47:09.635 [main] serve ";}i:2;i:2394;}i:30;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:2421;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" INFO 036 Starting peer with id=name:";}i:2;i:2423;}i:32;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2460;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"vp1";}i:2;i:2461;}i:34;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2464;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:" , network id=dev, address=9.3.158.178:7051, discovery.rootnode=, validator=true
~~~";}i:2;i:2465;}i:36;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2549;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2549;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:548:"An arbitrary number of logging modules can be created at runtime, therefore there is no “master list” of modules, and logging control constructs can not check whether logging modules actually do or will exist. Also note that the logging module system does not understand hierarchy or wildcarding: You may see module names like “foo/bar” in the code, but the logging system only sees a flat string. It doesn’t understand that “foo/bar” is related to “foo” in any way, or that “foo/*” might indicate all “submodules” of foo.";}i:2;i:2551;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3099;}i:40;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3099;}i:41;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:493:"可以在运行时创建任意数量的日志记录模块，因此没有模块的“主列表”一说，日志控制结构不能检查日志模块是否实际执行或将存在。另请注意，日志记录模块系统不明白层次结构或通配符：您可能会在代码中看到模块名称，如“foo/bar”，但日志记录系统只能看到一个扁平的字符串。它不明白“foo/bar”与“foo”有任何关系，或者“foo/*”可能表示foo的所有“子模块”。";}i:2;i:3101;}i:42;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3594;}i:43;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3594;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:"peer
The logging level of the peer command can be controlled from the command line for each invocation using the ";}i:2;i:3596;}i:45;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:3709;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"logging-level flag, for example";}i:2;i:3711;}i:47;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3742;}i:48;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3742;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"peer命令的日志等级可以使用命令行控制，每次调用peer时使用";}i:2;i:3744;}i:50;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:3824;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"logging-level，例如：
~~~
peer node start ";}i:2;i:3826;}i:52;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:3872;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"logging-level=debug
~~~";}i:2;i:3874;}i:54;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3897;}i:55;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3897;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:304:"The default logging level for each individual peer subcommand can also be set in the core.yaml file. For example the key logging.node sets the default level for the node subcommmand. Comments in the file also explain how the logging level can be overridden in various ways by using environment varaibles.";}i:2;i:3899;}i:57;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4203;}i:58;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4203;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:254:"每个单独的peer命令的默认日志记录级别也可以在core.yaml文件中设置。例如，键logging.node用于设置node子命令的默认级别。该文中的注释还解释了如何通过使用环境变量以各种方式覆盖日志级别。";}i:2;i:4205;}i:60;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4459;}i:61;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4459;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:363:"Logging severity levels are specified using case-insensitive strings chosen from
使用以下选择的不区分大小写的字符串可以指定日志严重级别：
~~~
CRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG
~~~
The full logging level specification for the peer is of the form
peer的完整日志级别的规格如下格式：
~~~
[<module>[,<module>";}i:2;i:4461;}i:63;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:4824;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"]=]<level>[:[<module>[,<module>";}i:2;i:4827;}i:65;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:4858;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"]=]<level>";}i:2;i:4861;}i:67;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:4871;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:311:"]
~~~
A logging level by itself is taken as the overall default. Otherwise, overrides for individual or groups of modules can be specified using the
本身的日志级别被视为总体默认值。另外，可以使用以下命令来指定单个或多个模块组的日志等级的覆盖:
~~~
<module>[,<module>";}i:2;i:4874;}i:69;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:5185;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:"]=<level>
~~~
syntax. Examples of specifications (valid for all of ";}i:2;i:5188;}i:71;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:5255;}i:72;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"logging-level, environment variable and core.yaml settings):
语法。规范示例（适用于所有的";}i:2;i:5257;}i:73;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:5360;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:"logging-level，环境变量和core.yaml设置）：
~~~
info                                       - Set default to INFO
warning:main,db=debug:chaincode=info       - Default WARNING; Override for main,db,chaincode
chaincode=info:main=debug:db=debug:warning - Same as above
~~~
Go chaincodes
Go链上代码";}i:2;i:5362;}i:75;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5668;}i:76;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5668;}i:77;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:331:"The standard mechanism to log within a chaincode application is to integrate with the logging transport exposed to each chaincode instance via the peer. The chaincode shim package provides APIs that allow a chaincode to create and manage logging objects whose logs will be formatted and interleaved consistently with the shim logs.";}i:2;i:5670;}i:78;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6001;}i:79;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6001;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:283:"链上代码应用程序中日志的标准机制是通过peer与暴露于每个链码实例的日志传输进行集成。 链上代码的shim包提供了API，允许链码创建和管理日志记录对象，日志对象的日志将被格式化，并与shim日志交织在了一起。";}i:2;i:6003;}i:81;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6286;}i:82;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6286;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:855:"As independently executed programs, user-provided chaincodes may technically also produce output on stdout/stderr. While naturally useful for “devmode”, these channels are normally disabled on a production network to mitigate abuse from broken or malicious code. However, it is possible to enable this output even for peer-managed containers (e.g. “netmode”) on a per-peer basis via the CORE_VM_DOCKER_ATTACHSTDOUT=true configuration option.
作为独立执行的程序，用户提供的链码在技术上也可以在stdout / stderr上产生输出。虽然对“开发模式”有用，但这种方式通常在生产环境上被禁用，以减轻破坏或恶意代码的滥用。然而，甚至可以通过CORE_VM_DOCKER_ATTACHSTDOUT = true配置选项在每个peer-peer的基础上为peer管理的容器（例如“netmode”）启用此输出。";}i:2;i:6288;}i:84;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7143;}i:85;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7143;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:253:"Once enabled, each chaincode will receive its own logging channel keyed by its container-id. Any output written to either stdout or stderr will be integrated with the peer’s log on a per-line basis. It is not recommended to enable this for production.";}i:2;i:7145;}i:87;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7398;}i:88;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7398;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:202:"一旦启用，每个链码将接收其自己的日志通道，其由container-id标识。写入stdout或stderr的任何输出将与peer的日志按照每行进行集成。不建议将其用于生产。";}i:2;i:7400;}i:90;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7602;}i:91;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7602;}i:92;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:7604;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"
NewLogger(name string) *ChaincodeLogger - Create a logging object for use by a chaincode";}i:2;i:7607;}i:94;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7696;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7696;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"(c *ChaincodeLogger) SetLevel(level LoggingLevel) - Set the logging level of the logger";}i:2;i:7698;}i:97;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7785;}i:98;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7785;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"(c *ChaincodeLogger) IsEnabledFor(level LoggingLevel) bool - Return true if logs will be generated at the given level";}i:2;i:7787;}i:100;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7904;}i:101;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7904;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"LogLevel(levelString string) (LoggingLevel, error) - Convert a string to a LoggingLevel";}i:2;i:7906;}i:103;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7993;}i:104;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7993;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"A LoggingLevel is a member of the enumeration";}i:2;i:7995;}i:106;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8040;}i:107;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8040;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:"LogDebug, LogInfo, LogNotice, LogWarning, LogError, LogCritical
which can be used directly, or generated by passing a case-insensitive version of the strings";}i:2;i:8042;}i:109;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8199;}i:110;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8199;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"DEBUG, INFO, NOTICE, WARNING, ERROR, CRITICAL
to the LogLevel ";}i:2;i:8201;}i:112;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:8263;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:8266;}i:114;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8267;}i:115;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8267;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"Formatted logging at various severity levels is provided by the functions";}i:2;i:8269;}i:117;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8342;}i:118;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8342;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:"以下函数提供了各种严重级别的格式化日志记录
~~~
(c *ChaincodeLogger) Debug(args ";}i:2;i:8344;}i:120;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8444;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"interface{})
(c *ChaincodeLogger) Info(args ";}i:2;i:8447;}i:122;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8491;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"interface{})
(c *ChaincodeLogger) Notice(args ";}i:2;i:8494;}i:124;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8540;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"interface{})
(c *ChaincodeLogger) Warning(args ";}i:2;i:8543;}i:126;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8590;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"interface{})
(c *ChaincodeLogger) Error(args ";}i:2;i:8593;}i:128;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8638;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"interface{})
(c *ChaincodeLogger) Critical(args ";}i:2;i:8641;}i:130;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8689;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"interface{})";}i:2;i:8692;}i:132;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8704;}i:133;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8704;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"(c *ChaincodeLogger) Debugf(format string, args ";}i:2;i:8706;}i:135;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8754;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"interface{})
(c *ChaincodeLogger) Infof(format string, args ";}i:2;i:8757;}i:137;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8817;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"interface{})
(c *ChaincodeLogger) Noticef(format string, args ";}i:2;i:8820;}i:139;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8882;}i:140;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"interface{})
(c *ChaincodeLogger) Warningf(format string, args ";}i:2;i:8885;}i:141;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:8948;}i:142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"interface{})
(c *ChaincodeLogger) Errorf(format string, args ";}i:2;i:8951;}i:143;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:9012;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"interface{})
(c *ChaincodeLogger) Criticalf(format string, args ";}i:2;i:9015;}i:145;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:9079;}i:146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:422:"interface{})
~~~
The f forms of the logging APIs provide for precise control over the formatting of the logs. The non-f forms of the APIs currently insert a space between the printed representations of the arguments, and arbitrarily choose the formats to use.
日志API的f形式可以精确控制日志格式。 API的非f形式当前在参数的打印表示之间插入一个空格，并任意选择要使用的格式。";}i:2;i:9082;}i:147;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9504;}i:148;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9504;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:891:"In the current implementation, the logs produced by the shim and a ChaincodeLogger are timestamped, marked with the logger name and severity level, and written to stderr. Note that logging level control is currently based on the name provided when the ChaincodeLogger is created. To avoid ambiguities, all ChaincodeLogger should be given unique names other than “shim”. The logger name will appear in all log messages created by the logger. The shim logs as “shim”.
在当前实现中，由shim和ChaincodeLogger生成的日志是时间戳的，标有记录器名称和严重性级别，并写入stderr。请注意，日志级别控制当前基于创建ChaincodeLogger时提供的名称。为了避免歧义，所有ChaincodeLogger应该被赋予除“shim”之外的唯一名称。记录器名称将显示在由记录器创建的所有日志消息中。垫片记录为“shim”。";}i:2;i:9506;}i:150;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10397;}i:151;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10397;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:"Go language chaincodes can also control the logging level of the chaincode shim interface through the SetLoggingLevel ";}i:2;i:10399;}i:153;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:10517;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:774:".
Go语言链接代码还可以通过SetLoggingLevel API来控制链式代码垫片界面的日志记录级别。
SetLoggingLevel(LoggingLevel level) - Control the logging level of the shim
SetLoggingLevel（LoggingLevel level） - 控制shim的日志记录级别
The default logging level for the shim is LogDebug.
shim的默认日志级别为LogDebug。
Below is a simple example of how a chaincode might create a private logging object logging at the LogInfo level, and also control the amount of logging provided by the shim based on an environment variable.
下面是一个简单的示例，说明链码如何创建LogInfo级别的专用日志对象日志记录，并且还可以基于环境变量来控制由垫片提供的日志量。
~~~
var logger = shim.NewLogger(";}i:2;i:10520;}i:155;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:11294;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"myChaincode";}i:2;i:11295;}i:157;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:11306;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:")";}i:2;i:11307;}i:159;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11308;}i:160;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11308;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"func main() {";}i:2;i:11310;}i:162;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11324;}i:163;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:31:"  logger.SetLevel(shim.LogInfo)";}i:2;i:11324;}i:164;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:102:"  logLevel, _ := shim.LogLevel(os.Getenv("SHIM_LOGGING_LEVEL"))
  shim.SetLoggingLevel(logLevel)
  ...";}i:2;i:11359;}i:165;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11359;}i:166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"}
~~~";}i:2;i:11469;}i:167;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11474;}i:168;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:11474;}}