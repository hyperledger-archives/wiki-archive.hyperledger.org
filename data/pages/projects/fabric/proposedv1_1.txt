====== Expected Hyperledger Fabric v1.1 Content ======

Dashboard for specific Epics, Stories, and tasks are available in the [[https://jira.hyperledger.org/secure/Dashboard.jspa?selectPageId=10104|Hyperledger Fabric Jira Dashboard]].

Discussion for Fabric releases happens [[https://chat.hyperledger.org/channel/fabric-release|on the #fabric-release channel in RocketChat]].

We have published the [[https://github.com/hyperledger/fabric/releases/tag/v1.1.0-preview|v1.1.0-preview release]] November 1, 2017 and [[https://github.com/hyperledger/fabric/releases/tag/v1.1.0-alpha|v1.1.0-alpha release]] January 26, 2018. Documentation is maintained in the [[http://hyperledger-fabric.readthedocs.io/en/master/index.html|master branch]] of the docs.

See the latest [[https://wiki.hyperledger.org/projects/fabric/roadmap|roadmap]].

**High level overview:**

===== Introduction of the following new features: =====

v1.1.0-alpha (also includes v1.1.0-preview content)

  * Ability to distinguish types of MSP identities, peer vs client.  This information can be utilized for access policies throughout the system.  [[https://jira.hyperledger.org/browse/FAB-5664|FAB-5664]]

  * Ability to trigger events on a per channel basis rather than global peer basis.  [[https://jira.hyperledger.org/browse/FAB-5695|FAB-5695]]

  * Filtered block event - Register for block transaction events with minimal information such as txid and tx validation indicator.  [[https://jira.hyperledger.org/browse/FAB-5481|FAB-5481]]

  * Package CouchDB indexes with chaincode to enable efficient queries of ledger state. [[https://jira.hyperledger.org/browse/FAB-3067|FAB-3067]]

  * Mutual TLS between Fabric nodes, and between clients and nodes.  [[https://jira.hyperledger.org/browse/FAB-6715|FAB-6715]]

  * Rolling Upgrade via configured capabilities - Support nodes of mixed versions in Fabric networks. [[https://jira.hyperledger.org/browse/FAB-5556|FAB-5556]]

v1.1.0-preview

  * Node JS chaincode - An additional implementation of chaincode that mirrors the current Golang version in functionality. The benefit is that when using the node SDK(although you can still use any SDK of your choosing) you are provided a full stack development model. This also helps the large Javascript developer community base with a familiar coding language.  [[https://jira.hyperledger.org/browse/FAB-2331|FAB-2331]]

  * Node JS connection profile - Currently all applications need to capture information of the target fabric environment. This enhancement generates a common exchange doc, with backend topology information. With this doc the application will no longer need to construct the channel, add peers, orderers and get the org admin, simplifying your application development. [[https://jira.hyperledger.org/browse/FAB-5363|FAB-5363]]

  *  Provide an encryption library that allows customers to encrypt sensitive data that a chaincode processes and updates.   This provides another level of security for highly sensitive data. [[https://jira.hyperledger.org/browse/FAB-830|FAB-830]]

  * Attribute based access control (ABAC) for chaincode, using attributes included in Fabric CA generated certificates.  This provides another means of enforcing access control in chaincode.  [[https://jira.hyperledger.org/browse/FAB-5346|FAB-5346]]

  * Chaincode APIs to retrieve transaction submitter information including certificate attributes [[https://jira.hyperledger.org/browse/FAB-6089|FAB-6089]]

  * Performance and scale. [[https://jira.hyperledger.org/browse/FAB-6421|FAB-6421]]
    * Orderer performance improvement [[https://jira.hyperledger.org/browse/FAB-5274|FAB-5274]]
    * Orderer horizontal scaling improvements which allows for more orderers to be added to handle more volume and load. [[https://jira.hyperledger.org/browse/FAB-5258|FAB-5258]]
    * MSP Identity caching [[https://jira.hyperledger.org/browse/FAB-5880|FAB-5880]]
    * Parallel transaction validation [[https://jira.hyperledger.org/browse/FAB-5932|FAB-5932]]
    * CouchDB performance improvement [[https://jira.hyperledger.org/browse/FAB-2725|FAB-2725]]

  * CRL support for Fabric CA - Ability to get a cert revocation list from Fabric CA. [[https://jira.hyperledger.org/browse/FAB-5300|FAB-5300]]
 
  * Enable fabric-ca-client to create a Certificate Signing Request - If a user wishes to use an external CA for generating and signing the certificates, it would be useful to leverage the fabric-ca-client and BCCSP to generate a certificate signing request for the keys generated by the BCCSP and write the CSR to a file without any interaction with the fabric-ca-server.  This would allow the user to then send the CSR file to an external CA. [[https://jira.hyperledger.org/browse/FAB-5389|FAB-5389]]

  * Serviceability enhancements. [[https://jira.hyperledger.org/browse/FAB-2985|FAB-2985]]

===== Experimental Features - *not* to be included in v1.1 release images, but available if you build from source and first set EXPERIMENTAL=true environment variable: =====

  * Enable (new/incomplete) features to be selectively included/excluded from the build. [[https://jira.hyperledger.org/browse/FAB-6020|FAB-6020]]

  * Private channel data. Ability to keep data on a channel private. This data will never be sent to the ordering service with the transaction. The private data is shared with a subset of peers, governed by policies, via the gossip protocol. For example all channel participants may need to be aware of a trade, but keep the trade price private among the trade participants.  [[https://jira.hyperledger.org/browse/FAB-1151|FAB-1151]]

  * Finer grained access control on channel functions rather than organization scoped access.  For example specify which identities or group of identities can invoke chaincode, retrieve blocks, retrieve transactions, etc.  [[https://jira.hyperledger.org/browse/FAB-3621|FAB-3621]]

  * Identity Mixer technology.  [[https://jira.hyperledger.org/browse/FAB-2005|FAB-2005]]

  * Java for smart contracts (chaincodes).  [[https://jira.hyperledger.org/browse/FAB-1973|FAB-1973]]
