=====  Notes from Fabric Discussion 23-JAN-2017 afternoon  =====

notes from Sharon Cocco (weeds):

<file>
weeds [13:20] another quick conversation--> Now the thing that we
can do, we can run Jeff Garrat's BDD- capture the block, put in
sample directory and we run with that.  That allows our CLI to
work,.. that would allow the demo scenario to work with the new
configuration block.  With that configuration block- what would
we have to do to submit that transaction to the orderer.  Have
you look at config txt template stuff?  Basically there is under
config tx test thereis order template file and peer template
file.  This is the statically exported thing (not fromjeff's
tool) this is configuration tool.. and feed in new chain- and
spits out the transaction you have to spit it out to create a new
chain- there is no import cycles,etc,..

[13:21]  So what if you did this? bring up compose, another
docker container we boot up and tells people to console into it
(exec batch into it).. it has the CLi and it has a series of
commands... it can be any of those things. You can log into xyz,
you run CDE,.. and then your thing is initialized an dyou can run
your nodejs.sdk to run your transactions.  People just have a
hard time running CLI-- it allows us to use docker and not
vagrant.  Have a CLI container and do stuff.  We just add
additional commands- this is admin configuring the network.  So
you want to create chain and here's what you do.

[13:21]  We can do that easily without channel create. and
specify flag default cahnnel, use your template.

[13:22]  You can actually do interactive- whatever command you
run- you run batch script and then test just exec docker and run
as a command line and without invoking the container- htat is how
we did this last week, we put it in a container

[13:22]  As long as we don't hardcode, but include the
"generation part"... how many templates... let's just cli create
to take argument where CLI chain create command will it do it for
you.. we will call the templates

[13:23]  so now on board -- we are adding CLI channel create for
alpha

[13:24]  Jeff has this working in behave- it's completely
parameterized.. you get a language- you can add orgs, change
orgs, create as many channels you want, create as many order
networks.... will we intimidate developers to do that... Jeff
says- it would be good to do a python setup .. you can clone the
get... Actually, what we should really do is bake into the
image.. Behave stuff drives docker compose.. and you can drive
docker.. bind in the docker socket.

ghaskins [13:24] @vpaprots @harrijk @ramesh regarding:
https://gerrit.hyperledger.org/r/#/c/4359/

[13:24]  how do we want to proceed ?

vpaprots [13:25] talking with John atm..

ghaskins [13:25] ok

[13:25]  ill look to you guys: if you come back and are confident
my concerns are unfounded, ill remove my -2

vpaprots [13:25] John showed me that softhsm was not installed..
and I forgot that its debian..

harrijk [13:26] I think for the first step, we'll need to get
softhsm2 into testenv for fabric

ghaskins [13:26] ok, thats a very low-risk proposition from my
perspective

vpaprots [13:26] I do need it in asap, sitting on quite the few
changes that cant go in without it.. but.. found some issues with
how I specify pkcs11-slot.

weeds [13:26] what is important is they need to have an admin
thing that is clear-- so the only way to build an app is to use
the SDK.. we should have two simple scripts that create channel
to call the apis-- just to make it easy.

ghaskins [13:27] (sorry weeds, cross-talked over your stream of
consciousness ;)

weeds [13:28] We are set on CLI and run clis in an interactive
docker container.  So we are going to modify channel create.. it
will take default template and use it as the configuration (it's
ok greg- just trying to capture discussion here for your guys-
can't tell if you can even follow the stream of consciousness)

ghaskins [13:28] understood, just apologizing for interrupting it

weeds [13:29] Jason- how would in default template get cert---
you would have to regenerate the template. Basically the tool
that I keep alluding to essentially is order admin tool that
connects to and dumps a template chain by looking at the block

[13:30]  The tool does not exist- there is a static tool that
exists, but we need this to work at run time. then we would check
template in and can be generated... as part of the compose once
you are running services which dumps template and would be fed
into chain creation tool

[13:31]  My developer needs a private key- we self generate all
that stuff.  we will have docker image for the cli.. so we could
just use a shared volume to the local msp which is needed for
that key and bake it in ahead of time... hmmm.  the one jeff does
bdd does it through shared volumes.   someone is outside of
docker writing a node app.. he has to find stuff.. if we just
started a container rather than docker run, we can do docker
exec,.. you could template, keys being there,etc,..

[13:33]  in their application, where do we get their certificate
from- there in a shared volume- they are on local file system,,..
you could put that in... that would be the easiest thing to do..
REally Jason said he needs to talk about the SDK guys -  they
really should not know how to do that and pick up from template
and be able to print them,. .for now it's an efficiency, because
we only have templates working is in go.. but that really should
be in sdk at this point

[13:33]  Binh suggested maybe give them an api to implement?
Jason said- ok.. give them an api to use the templates we
generate. Open a JIRA or slack it to them?  Slack it to them.

[13:34]  Barry- maybe I have Latitia to help you?  Jason- I would
love to get more people to know how this works. It's tying hte
config and node program and spinning up something quickly.

[13:34]  (we need to forget not to miss the java sdk)

[13:35]  There are some questions for Jim in terms of validation
process for Barry and Latitia

[13:35]  We have an image, spins up fabric, runs templates,..
which crypto mounted to volume and then tell sdk here is how you
connect and use this.

[13:37]  Just to get someone writing ... the thing with  say I
had another image he spins everything up and it's a done deal for
me- i have all certs and network. if I run a behave (instead of
the cli) run the docker image that runs the behave- we mount
that.. in behave, you would have to generate all the cert stuff..
it will do it for you.. we just tell the end user.. hey sdk
developer- yo uare ready to go.  If you just basically toe do not
decompose.. if you can get an image.. put.  now we can hardcode
behave .. maybe that's an easier fix.

[13:38]  Which is better? at end of the day, people are going to
have to know how to create the configuration transaction and you
won't have all your stuff in one place and you will have to deal
with templates... Yes, that's true.

[13:38]  The big thing is can you make behave from inside a
docker container-- that's going to be the question- you can bind
docker socket into docker image.  That's unit test, but Jeff
might know.

ghaskins [13:48] @weeds: on that front, it was my intention,
though I have yet to prove it out that "make behave" would
eventually drive the behave tests with a "$(DRUN) behave",
similar to how we do unit tests

[13:49]  as part of that, I would be moving the python
installation stuff that we currently do in the baseimage to be
within the testenv container that is JITted as part of the build

[13:50]  from there, it should be straight forward to grant the
behave container permissions to dockerd for its own control of
futher containers, similar to what we do in other places

[13:50]  but where I am going with this is: I woulnt classify it
as "make behave" running in a container, as much as "make behave"
drives behave within docker

[13:50]  thats probably the same thing you meant, but good to
clarify

binhn [18:15] @ghaskins :+1: We were talking about what would be
the best way to help app developers set up a working environment,
and the thought was to run a bdd feature (pick an appropriate
one)

ghaskins [18:16] ah, as in use bdd to help create an app
developer environment?

binhn [18:17] yes, but we wouldn’t want developers to have to
install vagrant + other tools, just bring up a docker image to
run the bdd from it

ghaskins [18:17] ok, but we are already largely there, arent we ?

[18:18]  the majority of functions (excluding bdd) only need
make/git/docker/docker-compose

[18:18]  and I think bdd could be brought into that fold fairly
easily

[18:19]  some of what you are talking about reminds me of this
old issue:
https://github.com/hyperledger/fabric-chaintool/issues/5 GitHub
add "chaintool new" · Issue #5 · hyperledger/fabric-chaintool ·
GitHub Would be nice if the tooling could emit a skeleton project
to get things started, similar to "lein new".
 

binhn [18:19] i think the work is to enable bdd inside a
container to create images and launch other containers

ghaskins [18:20] I was envisioning a user doing something like
"chaintool new" and it will spit out a skeleton chaincode app

[18:21]  it would be fairly easy to make different profiles that
are both CCI based and those that are not

[18:21]  not sure if that is exactly what you were looking for
though

binhn [18:22] and “chaintool new” with an option to launch an env
and deploy the app

ghaskins [18:22] ok, i see where you are going

[18:23]  yeah, you could use chaintool code-generation
capabilities to spit out whatever you wanted, and then drive an
environment with docker-compose

[18:23]  it would mostly be a function of defining the templates
that we need

[18:24]  chaintool is currently based on the stringtemplate
engine (http://www.stringtemplate.org/)

binhn [18:24] right and that is done with bdd features today, so
we were thinking about capture that in an image, but it can
definitely chaintool

ghaskins [18:25] ok...i think regardless, moving towards
integrating bdd with the $(DRUN) stuff makes sense

binhn [18:27] agreed

[18:29]  @ghaskins btw, we could use some feedback on this
chaincode deployment proposal
https://jira.hyperledger.org/browse/FAB-1783

ghaskins [18:29] will take a look, thx

binhn [18:30] thanks

</file>